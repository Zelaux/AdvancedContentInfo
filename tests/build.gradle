buildscript{
    ext{

    }
    repositories{
        mavenLocal()
        mavenCentral()
        google()
        maven{ url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven{ url 'https://jitpack.io' }
    }
}
plugins{
    id 'java'
    id 'maven-publish'
}
version '1.0'
//needed for android build

tasks.withType(JavaCompile){
    if(JavaVersion.current() != JavaVersion.VERSION_1_8){
        options.compilerArgs.addAll(['--release', '8'])
    }
    sourceCompatibility = 8
    targetCompatibility = 8
    doFirst{
//            options.compilerArgs = options.compilerArgs.findAll { it != '--enable-preview' }
    }
}

tasks.withType(Javadoc){
    options{
//            addStringOption('Xdoclint:none', '-quiet')
        addStringOption('-release', '8')
    }
}
apply plugin: "java-library"

compileJava.options.fork = true

dependencies{
    implementation project(":core")

    compileOnly "org.lz4:lz4-java:1.7.1"
    compileOnly arcModule("arc-core")
    compileOnly arcModule("extensions:flabel")
    compileOnly arcModule("extensions:freetype")
    compileOnly arcModule("extensions:g3d")
    compileOnly arcModule("extensions:fx")
    compileOnly arcModule("extensions:arcnet")

//        compileOnly "com.github.Anuken.Mindustry:core:$mindustryVersion"
    annotationProcessor("com.github.Zelaux.MindustryModCore:annotations:$modCoreVersion")
    compileOnly "com.github.Zelaux.MindustryModCore:annotations:$modCoreVersion"
    compileOnly mindustryModule("core")
}


afterEvaluate{
    task mergedJavadoc(type: Javadoc){

        source rootProject.subprojects.collect{ project ->
            if(project.hasProperty("sourceSets")){
                return project.sourceSets.main.allJava
            }
        }

        classpath = files(rootProject.subprojects.collect{ project ->
            if(project.hasProperty("sourceSets")){
                return project.sourceSets.main.compileClasspath
            }
        })
        destinationDir = new File(buildDir, 'javadoc')
    }
}
project.archivesBaseName = "AdvancedContentInfoTestMod.jar"
jar{
    dependsOn(":core:jar")
    archiveFileName = "${project.archivesBaseName}."
    from{
        project(":core").fileTree("build/libs/core.jar").collect{ it.isDirectory() ? it : zipTree(it) }
    }

    from(rootDir){
        include "mod.hjson"
        include "mod.json"
        include "icon.png"
    }

    from("core/assets/"){
        include "**"
    }
}
sourceSets.main.java.srcDirs = ["src/", "$buildDir/generated/sources/annotationProcessor/java/main"]
sourceSets.main.resources.srcDirs = ["assets/"]
