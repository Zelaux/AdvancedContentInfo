import java.time.format.DateTimeFormatter

buildscript {
    ext {
        arcHash = 'v135'
        mindustryVersion = 'v135'
        modsDirectories = [] ;
        def file=new File(rootDir, "modsDirectories.txt");
//        println "abs->"+file.getAbsolutePath();
        if (file.exists()){
            BufferedReader reader=new BufferedReader(new FileReader(file));
            reader.lines().forEach(line->modsDirectories.add(line))
        }
        modCoreVersion = "f3028a8d038"
    }
    repositories {
        mavenLocal()
        mavenCentral()
        google()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url 'https://jitpack.io' }
    }

    dependencies {
        classpath "com.github.Anuken.Mindustry:core:$mindustryVersion"
        classpath "com.github.Anuken.Mindustry:tools:$mindustryVersion"
        classpath "com.github.Anuken.Arc:arc-core:$mindustryVersion"
        classpath "com.github.Anuken.Arc:packer:$arcHash"
    }
}
plugins {
    id 'java'
    id 'maven-publish'
}
version '1.0'
allprojects {
    ext{
        arcModule = { String name ->
            //skip to last submodule
            if (name.contains(':')) name = name.split(':').last()
            return "com.github.Anuken.Arc:$name:$arcHash"
        }
        mindustryModule = { String name ->
            //skip to last submodule
            if (name.contains(':')) name = name.split(':').last()
            return "com.github.Anuken.Mindustry:$name:$mindustryVersion"
        }
    }
    apply plugin: 'maven-publish'
    repositories {
        mavenLocal()
        google()
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
        maven { url 'https://jitpack.io' }
        jcenter()
    }
    tasks.withType(JavaCompile) {
        targetCompatibility = 14
        sourceCompatibility = 8
        options.encoding = "UTF-8"
        options.compilerArgs += ["-Xlint:deprecation"]
    }
}
//needed for android build
ext {
    //the build number that this mod is made for
    //version of SDK you will be using
    sdkVersion = '30'
    sdkRoot = System.getenv("ANDROID_HOME")

    doExec = { cmd ->
        def proc = cmd.execute(null, new File("$buildDir/libs"))
        proc.waitForProcessOutput(System.out, System.err)
    }
}
configure(project(":core")) {

    tasks.withType(JavaCompile) {
        if (JavaVersion.current() != JavaVersion.VERSION_1_8) {
            options.compilerArgs.addAll(['--release', '8'])
        }
        sourceCompatibility = 8
        targetCompatibility = 8
        doFirst {
//            options.compilerArgs = options.compilerArgs.findAll { it != '--enable-preview' }
        }
    }

    tasks.withType(Javadoc) {
        options {
//            addStringOption('Xdoclint:none', '-quiet')
            addStringOption('-release', '8')
        }
    }

}
project(":core") {
    apply plugin: "java-library"

    compileJava.options.fork = true

    task preGen {
        outputs.upToDateWhen { false }
//        writeProcessors()
    }

    task copyChangelog {
    }

    dependencies {
        compileJava.dependsOn(preGen)

        compileJava.dependsOn(preGen)

        compileOnly "org.lz4:lz4-java:1.7.1"
        compileOnly arcModule("arc-core")
        compileOnly arcModule("extensions:flabel")
        compileOnly arcModule("extensions:freetype")
        compileOnly arcModule("extensions:g3d")
        compileOnly arcModule("extensions:fx")
        compileOnly arcModule("extensions:arcnet")

//        compileOnly "com.github.Anuken.Mindustry:core:$mindustryVersion"
        compileOnly mindustryModule("core")

    }

    afterEvaluate {
        task mergedJavadoc(type: Javadoc) {

            source rootProject.subprojects.collect { project ->
                if (project.hasProperty("sourceSets")) {
                    return project.sourceSets.main.allJava
                }
            }

            classpath = files(rootProject.subprojects.collect { project ->
                if (project.hasProperty("sourceSets")) {
                    return project.sourceSets.main.compileClasspath
                }
            })
            destinationDir = new File(buildDir, 'javadoc')
        }
    }
    jar {
        exclude("acontent/entities/comp/**")
        exclude("acontent/entities/compByAnuke/**")
    }
}
project(":tests"){
    apply plugin: "java-library"

    compileJava.options.fork = true

    dependencies {
        implementation project(":core")

        compileOnly "org.lz4:lz4-java:1.7.1"
        compileOnly arcModule("arc-core")
        compileOnly arcModule("extensions:flabel")
        compileOnly arcModule("extensions:freetype")
        compileOnly arcModule("extensions:g3d")
        compileOnly arcModule("extensions:fx")
        compileOnly arcModule("extensions:arcnet")

//        compileOnly "com.github.Anuken.Mindustry:core:$mindustryVersion"
        compileOnly mindustryModule("core")
    }
}
project(":tools") {
    apply plugin: "java"

    dependencies {
        implementation 'commons-io:commons-io:2.5'

        implementation project(":core")
        implementation arcModule('arc-core')

//        implementation "com.github.javaparser:javaparser-symbol-solver-core:$jparcerVersion"
        implementation mindustryModule("core")
        implementation mindustryModule("tools")
    }
}
configure([":core"].collect{project(it)}){
    java{
        withJavadocJar()
        withSourcesJar()
    }

    publishing {
        publications {
            maven(MavenPublication) {
                from components.java
            }
        }
    }
}
task jarAndroid {
    dependsOn "jar"

    doLast {
        //collect dependencies needed for desugaring
        def files = (project(":core").configurations.compileClasspath.asList() + project(":core").configurations.runtimeClasspath.asList() + [new File("$sdkRoot/platforms/android-$sdkVersion/android.jar")])
        def dependencies = files.collect { "--classpath $it.path" }.join(" ")

        //dex and desugar files - this requires d8 in your PATH
        doExec("d8 $dependencies --min-api 14 --output ${project.archivesBaseName}Android.jar ${project.archivesBaseName}Desktop.jar")
    }
}
jar {
    dependsOn "core:jar"
    archiveFileName = "${project.archivesBaseName}Desktop.jar"
    from {
        project(":core").fileTree("build/libs/core.jar").collect { it.isDirectory() ? it : zipTree(it) }
    }

    from(rootDir) {
        include "mod.hjson"
        include "mod.json"
        include "icon.png"
    }

    from("core/assets/") {
        include "**"
    }
}
task deploy(type: Jar) {
//    dependsOn jarAndroid
    dependsOn jar
    archiveFileName = "${project.archivesBaseName}.jar"

    from { [zipTree("$buildDir/libs/${project.archivesBaseName}Desktop.jar"), zipTree("$buildDir/libs/${project.archivesBaseName}Android.jar")] }

    doLast {
        delete { delete "$buildDir/libs/${project.archivesBaseName}Desktop.jar" }
        delete { delete "$buildDir/libs/${project.archivesBaseName}Android.jar" }
    }
}
task mjar(){
    dependsOn "core:jar"
    dependsOn "tests:jar"
    ext{
        acopy = { String intoPath ->
            def project=project(":tests");
            delete{
                delete "${intoPath}/${project.archivesBaseName}"
            }
            copy{
                from "$buildDir/../tests/build/libs/${project.archivesBaseName}"
                into intoPath
            }
           // println "$buildDir/../tests/build/libs/${project.archivesBaseName}.jar"
            println "Moved to ${intoPath}"
        }
    }
    doLast{
        def modsDirectories = [];
        def file = new File(rootDir, "modsDirectories.txt");

        if (file.exists()) {
            BufferedReader reader = new BufferedReader(new FileReader(file));
            reader.lines().forEach(line -> modsDirectories.add(line))
            reader.close();
        } else {
            modsDirectories.add("classic");
        }
        for (String directory : modsDirectories) {
            if (directory.equals("classic")) {
                directory = getdatadir() + "mods";
            }
//            println "directory: "+directory
            acopy(directory);
        }
        def time = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss"));
        println "Build ended at: ${time}"
    }
}
def os() { //Returns OS name
    String s = System.getProperty("os.name");
    return s == null ? "" : s;
}

def getdatadir() { //Returns Mindustry data directory path
    def ret = System.getenv("MINDUSTRY_DATA_DIR")
    if (ret == null) {
        def os = os()
        if (os.contains("Windows")) {
            return System.getenv("AppData") + "\\Mindustry\\"
        } else if (os.contains("Linux") || os.contains("BSD")) {
            if (System.getenv("XDG_DATA_HOME") != null) {
                String dir = System.getenv("XDG_DATA_HOME")
                if (!dir.endsWith("/")) dir += "/"
                return dir + "Mindustry/"
            }
            return System.getProperty("user.home") + "/.local/share/Mindustry/"
        } else if (os.contains("Mac")) {
            return System.getProperty("user.home") + "/Library/Application Support/Mindustry/";
        }
    }
    return ret
}
